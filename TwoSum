import java.util.HashMap;

//Given an array of integers, return indices of the two numbers such that they add up to a specific target.
//You may assume that each input would have exactly one solution, and you may not use the same element twice.
//Example:
//Given nums = [2, 7, 11, 15], target = 9,
//Because nums[0] + nums[1] = 2 + 7 = 9,
//return [0, 1].
public class TwoSum {
	public static void main(String[] args) {
		int[] result = twoSum(new int[] { 2, 7, 11, 15 }, 9);
		for (int a : result) {
			System.out.print(a);
		}
	}

	public static int[] twoSum(int[] nums, int target) {
		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
		for (int i = 0; i < nums.length; i++) {
			map.put(nums[i], i);
		}
		for (int j = 0; j < nums.length; j++) {
			int second = target - nums[j];
			if (map.containsKey(second) && map.get(second) != j) {
				return new int[] { j, map.get(second) };
			}
		}

		return new int[] { 0, 0 };
	}

}

// Time complexity : O(n); O(n): for taking numbers from array and O(1): for
// lookup
